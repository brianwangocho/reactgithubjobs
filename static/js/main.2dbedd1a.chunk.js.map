{"version":3,"sources":["components/jobs/fetchJobs.js","components/jobs/job.js","components/jobs/jobPagination.js","components/jobs/searchForm.js","App.js","serviceWorker.js","index.js"],"names":["ACTION","BASE_URL","reducer","state","action","type","loading","jobs","payload","hasNextPage","error","Job","job","useState","open","SetOpen","Card","className","Body","Title","title","company","Subtitle","Date","created_at","toLocaleDateString","Badge","variant","location","style","wordBreak","source","how_to_apply","backgroundColor","height","alt","src","company_logo","Text","Button","onClick","prevOpen","Collapse","in","description","JobPagination","page","setPage","adjustPage","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","params","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","xs","Check","full_time","label","id","App","SetPage","SetParams","useReducer","dispatch","cancelToken","axios","CancelToken","useEffect","get","token","markdown","then","res","data","catch","e","isCancel","cancelToken1","cancel","fetchJobs","Container","param","target","prevParams","Spinner","animation","map","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2dbedd1a.chunk.js","sourcesContent":["\r\n// this code fetches jobs from network which expects such as params(location,descriptions) and page\r\nimport { useReducer,useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\n// things you wanna do\r\nconst ACTION ={\r\n    MAKE_REQUEST:'make-request',\r\n    GET_DATA:'get_data',\r\n    ERROR:'error',\r\n    UPDATE_HAS_NEXT_PAGE:'update-has-next-page'\r\n\r\n}\r\n///to prevent cors errors in local dev use this heroku cors any where\r\n\r\nconst BASE_URL = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json'\r\n\r\nfunction reducer(state,action){\r\n    switch(action.type){\r\n        case ACTION.MAKE_REQUEST:\r\n            return {loading:true,jobs:[]}\r\n\r\n        case ACTION.GET_DATA:\r\n            return {...state,loading:false,jobs:action.payload.jobs}\r\n\r\n        case ACTION.UPDATE_HAS_NEXT_PAGE:\r\n            return {...state,hasNextPage: action.payload.hasNextPage}\r\n\r\n        case ACTION.ERROR:\r\n            return {...state,loading:false,error:action.payload.error,jobs:[]}\r\n        default:\r\n        return state\r\n    }\r\n\r\n}\r\n\r\nexport default function FetchJobs(params,page){\r\n    const[state,dispatch] = useReducer(reducer,{jobs:[],loading:true})\r\n\r\n    const cancelToken = axios.CancelToken.source()\r\n\r\n    useEffect( ()=>{\r\n        dispatch({type:ACTION.MAKE_REQUEST})\r\n        axios.get(BASE_URL,{\r\n            cancelToken:cancelToken.token,\r\n            params:{markdown:true,page:page,...params}\r\n        }).then(res=>{\r\n            dispatch({type:ACTION.GET_DATA,payload:{jobs:res.data}})\r\n        }).catch(e=>{\r\n            if(axios.isCancel(e)) return\r\n            dispatch({type:ACTION.ERROR,payload:{error:e}})\r\n        })\r\n\r\n        const cancelToken1 = axios.CancelToken.source()\r\n        axios.get(BASE_URL,{\r\n            cancelToken:cancelToken1.token,\r\n            params:{markdown:true,page:page+1,...params}\r\n        }).then(res=>{\r\n            dispatch({type:ACTION.UPDATE_HAS_NEXT_PAGE,payload:{hasNextPage:res.data !== 0}})\r\n        }).catch(e=>{\r\n            if(axios.isCancel(e)) return\r\n            dispatch({type:ACTION.ERROR,payload:{error:e}})\r\n        })\r\n\r\n\r\n        return()=>{\r\n            cancelToken.cancel()\r\n            cancelToken1.cancel()\r\n        }\r\n\r\n    },[params,page])\r\n\r\n    return state\r\n}","import React, { useState } from 'react'\r\nimport { Card ,Badge, Button,Collapse} from 'react-bootstrap'\r\n\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\n\r\n\r\nexport default function Job({job }){\r\n\r\n    const [open,SetOpen] = useState(false)\r\n\r\n    return(\r\n        <Card className=\"dark-card\">\r\n            <Card.Body>\r\n                <div className=\"d-flex justify-content-between\">\r\n                <div>\r\n                    <Card.Title>\r\n                    {job.title} - <span className=\"text-muted font-weight-light\">{job.company}</span>\r\n                    </Card.Title>\r\n                    <Card.Subtitle className=\"text-muted mb-2\">\r\n                        {new Date(job.created_at).toLocaleDateString()}\r\n                    </Card.Subtitle>\r\n                    <Badge variant=\"secondary\" className=\"mr-2\">{job.type}</Badge>\r\n                    <Badge variant=\"secondary\">{job.location}</Badge>\r\n                    <div style={{wordBreak:'break-all'}}> \r\n                        <ReactMarkdown source={job.how_to_apply} />\r\n                    </div>\r\n                    \r\n                </div>\r\n                    <img className=\"d-none d-md-block\" style={{backgroundColor:\"#778899\"}} height=\"50\" alt={job.company} src={job.company_logo}/>\r\n                </div>\r\n                <Card.Text>\r\n                    <Button \r\n                    onClick={()=>SetOpen(prevOpen => !prevOpen)} \r\n                    variant=\"primary\">{open ? \"Hide details\":\"Show Details\"}</Button>\r\n                </Card.Text>\r\n                <Collapse in={open}>\r\n                <div className=\"mt-4\">\r\n                    <ReactMarkdown source={job.description}/>\r\n                </div>\r\n                </Collapse>\r\n                \r\n            </Card.Body>\r\n           \r\n        </Card>\r\n    )\r\n\r\n}","import React from 'react'\r\nimport { Pagination }  from 'react-bootstrap'\r\n\r\nexport default function JobPagination({page,setPage,hasNextPage}) {\r\n\r\n    function adjustPage(amount){\r\n        setPage(prevPage  => prevPage + amount)\r\n    }\r\n    return(\r\n      <Pagination>\r\n         {page !== 1 && <Pagination.Prev onClick={()=>adjustPage(-1)}/> } \r\n         {page !== 1 &&<Pagination.Item onClick={()=>setPage(1)}>1</Pagination.Item>}\r\n         {page >2 &&<Pagination.Ellipsis/>}\r\n          {page >2 &&<Pagination.Item onClick={()=>{adjustPage(-1)}}>{page-1}</Pagination.Item>}\r\n          <Pagination.Item active>{page}</Pagination.Item>\r\n          {hasNextPage && <Pagination.Item  onClick={()=>{adjustPage(1)}}>{page+1}</Pagination.Item>}\r\n          {hasNextPage &&<Pagination.Next  onClick={()=>{adjustPage(1)}}/>}\r\n      </Pagination>\r\n    )\r\n\r\n}","import React from 'react'\r\nimport { Form ,Col} from 'react-bootstrap'\r\n\r\nexport default function SearchForm({params,onParamChange}){\r\n    return(\r\n        <Form className=\"mb-4\">\r\n            <Form.Row className=\"align-items-end\">\r\n                <Form.Group as ={Col}>\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control onChange={onParamChange} value={params.description} name=\"description\" type=\"text\"/>\r\n                </Form.Group>\r\n                <Form.Group as ={Col}>\r\n                    <Form.Label>location</Form.Label>\r\n                    <Form.Control onChange={onParamChange} value={params.location} name=\"location\" type=\"text\"/>\r\n                </Form.Group>\r\n                <Form.Group as ={Col} xs=\"auto\" className=\"ml-2\">\r\n                    <Form.Check onChange={onParamChange} \r\n                    className=\"mb-2\"\r\n                    value={params.full_time} \r\n                    type=\"checkbox\"\r\n                    label=\"Only full time\"\r\n                    name=\"full_time\" \r\n                    id=\"full-time\"/>\r\n                </Form.Group>\r\n            </Form.Row>\r\n        </Form>\r\n    )\r\n\r\n}","import React ,{ useState }from 'react';\nimport fetchJobs from './components/jobs/fetchJobs'\nimport Job from './components/jobs/job'\nimport {Container,Spinner} from 'react-bootstrap'\nimport './App.css';\nimport JobPagination from './components/jobs/jobPagination';\nimport SearchForm from './components/jobs/searchForm';\n\nfunction App() {\n\n  const [page,SetPage] = useState(1)\n  const [params,SetParams] =useState({})\n   const {jobs,loading,error,hasNextPage} =fetchJobs(params,page)\n  function handleParamChange(e){\n    const param = e.target.className\n    const value = e .target.value\n    SetPage(1)\n    SetParams(prevParams=>{\n      return{...prevParams,[param]:value}\n    })\n  }\n\n  return (\n    <Container className=\"my-4 dark-theme\">\n    <h1 className=\"mb-4\">Git Hub Jobs</h1>\n      <SearchForm params={params} onParamChange={handleParamChange}/>\n      <JobPagination page={page} setPage={SetPage} hasNextPage={hasNextPage}/>\n      {loading && <div className=\"\"><Spinner variant=\"info\"animation=\"grow\"/><Spinner variant=\"success\" animation=\"grow\"/><Spinner animation=\"grow\"/></div>}\n      {error && <h1>Error try again later</h1>}\n      {jobs.map(job=>{\n          return <Job key={job.id} job={job}></Job>\n      })}\n      \n        \n\n\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}